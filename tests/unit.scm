(define test-num 0)
(define section 0)
(define errors 0)
(define test (lambda (val exp)
                   (set! test-num (+ test-num 1))
                   (display "Test ")
                   (display section)
                   (display ".")
                   (display test-num)
                   (if (equal? val exp)
                      (begin
                        (display " passed: ")
                        (display val)
                        (newline))
                      (begin
                        (display " ERROR: expected ")
                        (display exp)
                        (display ", got ")
                        (display val)
                        (newline)
                        (set! errors (+ errors 1))))))

(define new-section (lambda (msg)
      (set! section (+ section 1))
      (set! test-num 0)
      (newline)
      (display "Section ")
      (display section)
      (display ": ")
      (display msg)
      (display  " =================\n")))

(new-section "Literals")
(test 1 1)
(test -1 -1)
(test -1.2345 -1.2345)
(test 2/3 2/3)
(test 10/5 2)
(test 2+3i 2+3i)
(test 2-3i 2-3i)
(test 2.0+3i 2.0+3i)
(test 1@0 1@0)
(test 2@1.5 2@1.5)
(test 2/3@1/3 2/3@1/3)
(test 'abc 'abc)
(test "Hello" "Hello")
(test '(a b c) '(a b c))
(test #(4 3.0 two 2/2) #(4 3.0 two 1))

(new-section "Integers")
(test (+ 1 2) 3)
(test (+ 1 2 3 4 5) 15)
(test (+ 5) 5)
(test (+) 0)
(test (- 1 2) -1)
(test (- 10 1 2 3 4) 0)
(test (- 5) -5)
(test (* 2 3) 6)
(test (* 1 2 3 4 5) 120)
(test (* 5) 5)
(test (*) 1)
(test (/ 10 5) 2)
(test (/ -10 5) -2)
(test (/ -10 -5) 2)
(test (/ 64 2 2 2 2) 4)

(new-section "Case")
(test (case (* 2 3)
        ((2 3 5 7) 'prime)
        ((1 4 6 8 9) 'composite))
      'composite)
(test (case (car '(c d))
            ((a e i o u) 'vowel)
            ((w y) 'semivowel)
            (else 'consonant))
      'consonant)

(newline)
(if (zero? errors)
    (display "All tests PASSED!")
    (begin
        (display "There were ")
        (display errors)
        (display " errors")))
