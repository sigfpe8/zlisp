2023-06-29 - Unify lexer with input ports
             The input part is mostly done. There are a few missing primitives
             like (read-char), (peek-char) and a few others. There is probably
             room for more Improvements, like unifying Lexer{} with Zig's
             Reader{} and Printer{} with Writer{} but this will have to wait
             until I understand these mechanisms better. Another thing that
             bothers me a little is that a Port, being a tagged union, occupies
             16 bytes instead of just the 8 bytes of a pointer. Maybe in the
             future I'll have two separate tables, one for input ports and
             another for output ports. An even port id would identify, say,
             an input port and an odd id an output port.

2023-06-23 - Improvements to Lexer API
             This is work necessary to integrate the Lexer with input ports.

2023-06-20 - Initial support for I/O ports
             I have implemented the port datatype and some output primitives
             but the input side is still missing. I'm still investigating
             Readers/Writers in Zig and how to best mix input from files and
             a console. Besides, the input side has to be integrated with the
             Lexer.

2023-06-20 - Arithmetic primitives for rational and complex numbers
             Adapted the basic arithmetic primitives (+ - * / < <= = > >=) to
             rational, polar and complex numbers. Since each component of
             a polar/complex number can be any of 3 types (integer, float or
             rational), this generates a lot of complexity when these things
             get mixed in an expression. I think it all works correctly in
             the end, but it looks quite inefficient. Without static types I
             think even a compiler would have a hard time optimizing such
             operations. Anyway, it's nice to see expressions like this one
             below evaluating corretly:
                > (= 2 2.0 4/2 8/4+0i 10/5@0)
                #t

2023-06-15 - More support for rational and complex numbers
             Adapted some numeric predicates to rational/polar/complex, fixed
             some others and added `make-polar` and `make-rectangular`. When
             making numbes (`makeXXX()`), converto to integer zero if possible.
             In `makeRational()`, try to reduce the ratio to lowest terms.

2023-06-14 - Basic support for complex numbers
             Completely rewrote the tokenization of numbers in a more generic
             way. This allows the real and imaginary parts of a complex number
             to be any combination of reals (small_int, integer, rational or
             float). There are two distinct literal formats for complex numbers:
             rectangular (a+bi) or polar (mag@angle). Apparently, both Racket
             and Gambit convert numbers entered in polar format to rectangular.
             I decided to keep them internally as separate types because
             multiplicative operations can be performed faster and more
             accurately in polar form. All the math primitives need to be
             reviewed in order to support complex and rational numbers. This
             is coming soon. Although I've generally been following the R5RS
             spec, for numbers I opted to follow the R6RS grammar because
             it eliminates the "non-exact digits", '#', and clarifies a few
             other things (e.g. inf.0/nan.0).

2023-06-08 - Restructure error handling/logging
             There are a few things I dislike about Zig's error mechanism.
             First there's the problem that it still can't infer the error
             type for recursive functions. Aggravating this problem is the
             fact that if your recursive function calls a few std library
             functions, soon your error union will incorporate a dozen or
             more system errors. Finally, I still don't know how to associate
             a message ([]const u8) to the errors. I suspect there may be
             a way to do this using comptime. In any case, the current commit
             improves a little bit on error handling in general, but I still
             wish to make it better. Errors are now caught in repl() (main.zig).
             Syntax or parsing errors are reported/logged by lexer.logError()
             while eval errors are reported by eval.logError().

2023-05-29 - Implement character names
             Added syntax for #\name, such as #\linefeed and #\tab. There's
             a table with a bunch of names usually available on some Scheme
             implementations. I'd like to add something new, such as #\euro,
             but first I must sort out the Unicode representation issue (i.e.
             UTF-8 vs UTF-16). A cleanup of error handling and error messages
             is also in order.

2023-05-27 - Implement basic support for character datatype
             Added the datatype itself plus some basic primitives:
                 (char? <exp>)
                 (char->integer <char>)
                 (integer->char <code>)
                 (string-ref <string> <position>)
             For now this supports basically ASCII only, although I'm planning
             to support Unicode soon. I think current Scheme implementations
             use UTF-16 (UCS-2) for characters and strings, but I'd like to
             use UTF-8 since this is becoming more common these days for new
             languages like Zig and Rust. Basically I could choose from:
                1) Use UTF-16 as seems to be the case with some implementations;
                2) Use UTF-8 as is my desire, although this brings some 
                   complications because the characters occupy variable number
                   of bytes (think string-ref, for example);
                3) Support both mechanisms via separate builds. I don't know how
                   to do this in Zig yet and besides it would require quite more
                   work.
             So, at this point I'm not sure which path to follow.

2023-05-26 - Implement quasiquote (no vectors for now)
             This was much harder to implement than I anticipated and I'm not
             sure I got the recursion cases correctly. Two features for this
             language facility make its implementation complicated: 1) nesting,
             which creates cross recursion with quasiquote/quote/unquote/
             unquote-splicing; 2) splicing prevents you from using 'cons' to
             construct the result, you have to use 'append' or something like
             it. This last point is the reason I haven't implemented quasiquote
             for vectors yet, since it will require resizing the vector.
             Anyway, I think this is a nice language feature, but my implementation
             looks quite inefficient.

2023-05-18 - Implement cond (=> clause still missing)
             I think in order to implement => I will first need to overhaul
             the way 'apply' works. I have currently three different versions
             of 'apply' (procedure/primitive/special form) that need to work in
             a more generic way.

2023-05-17 - Handle special forms in a more structured way
             Up until now, the special forms were being handled by 'if' tests
             in 'eval'. This was fine when there were few of them, but as I
             start to implement more and more special forms, this became 
             inconvenient. So I implemented a mechanism similar to the one
             used by the primitives. In fact, for a while I thought I should
             handle both in the same way, in the same file, but in the end I
             realized this would cause some problems and opted for a separate
             handling (special.zig). The curious thing is that special forms
             now are a (very special) datatype and can be assigned to variables.
             I'm not sure if this is appropriate, but I thought this could be
             useful later when I implement macros.

2023-05-12 - Implement and/or special forms
             Initially I implemented them as primitives... Ooops! Of course they
             need to be special forms so as to implement short-circuit evaluation.
             For regular procedures/primitives you first evaluate all the arguments,
             which is not what we want for and/or.

2023-05-09 - Implement letrec/zero?
             My intention was to implement only 'letrec', but in order to test the
             example from r5rs.pdf I had to also include 'zero?'.

            (letrec ((even?
                          (lambda (n)
                                (if (zero? n)
                                    #t
                                    (odd? (- n 1)))))
                     (odd?
                          (lambda (n)
                                (if (zero? n)
                                    #f
                                    (even? (- n 1)))
                         )))
                (even? 89)
            )

2023-05-08 - Implement list/list?/null?/reverse primitives

2023-05-06 - Implement begin
             For now, only a sequence of expressions, without any initial 
             definitions. At some point I will need to rewrite <body> to
             include definitions and that will be a good time to revisit
             'begin'.

2023-05-05 - Implement let*

2023-05-04 - Add string type

2023-05-03 - Add type predicates
           - Support [...] and {...}
           -  Multi-line input

2023-04-25 - Initial commit
